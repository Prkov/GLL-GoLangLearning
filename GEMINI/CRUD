–ö–æ–Ω–µ—á–Ω–æ\! –í–æ—Ç –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é CRUD REST API –Ω–∞ —è–∑—ã–∫–µ Go.

CRUD REST API ‚Äî —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –≠—Ç–æ API (–ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è), –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å **REST** (Representational State Transfer) –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ç—ã—Ä–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π **CRUD** (Create, Read, Update, Delete) –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º–∏.

-----

## 1\. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: CRUD + REST

### CRUD

–≠—Ç–æ –∞–∫—Ä–æ–Ω–∏–º –¥–ª—è —á–µ—Ç—ã—Ä–µ—Ö –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É –ª—é–±–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ —Å –¥–∞–Ω–Ω—ã–º–∏:

  * **C**reate (–°–æ–∑–¥–∞—Ç—å): –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
  * **R**ead (–ü—Ä–æ—á–∏—Ç–∞—Ç—å): –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π.
  * **U**pdate (–û–±–Ω–æ–≤–∏—Ç—å): –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏.
  * **D**elete (–£–¥–∞–ª–∏—Ç—å): –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏.

### REST

–≠—Ç–æ –Ω–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å) –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤. –ö–ª—é—á–µ–≤–∞—è –∏–¥–µ—è REST ‚Äî —ç—Ç–æ —Ä–∞–±–æ—Ç–∞ —Å "—Ä–µ—Å—É—Ä—Å–∞–º–∏". –†–µ—Å—É—Ä—Å ‚Äî —ç—Ç–æ –ª—é–±–∞—è —Å—É—â–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ø—Ä–æ–¥—É–∫—Ç", "–∑–∞–∫–∞–∑").

**–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã REST, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å:**

1.  **–†–µ—Å—É—Ä—Å—ã:** API –æ–ø–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Å—É—Ä—Å–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/users`, `/products/123`).
2.  **HTTP-–º–µ—Ç–æ–¥—ã:** –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ HTTP-–≥–ª–∞–≥–æ–ª—ã (–º–µ—Ç–æ–¥—ã) –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞–¥ —ç—Ç–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏.
3.  **JSON/XML:** –î–∞–Ω–Ω—ã–µ –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (–Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–µ–Ω) –∏–ª–∏ XML.
4.  **Stateless (–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è):** –°–µ—Ä–≤–µ—Ä –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏. –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

-----

## 2\. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ CRUD –∏ REST

–í–æ—Ç –∫–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ CRUD "–ª–æ–∂–∞—Ç—Å—è" –Ω–∞ HTTP-–º–µ—Ç–æ–¥—ã –∏ URL –≤ —Å—Ç–∏–ª–µ REST. –î–æ–ø—É—Å—Ç–∏–º, –Ω–∞—à —Ä–µ—Å—É—Ä—Å ‚Äî —ç—Ç–æ "–∑–∞–¥–∞—á–∏" (`tasks`).

| –û–ø–µ—Ä–∞—Ü–∏—è CRUD | HTTP-–º–µ—Ç–æ–¥ | URL-–ø—É—Ç—å (Endpoint) | –û–ø–∏—Å–∞–Ω–∏–µ |
| :--- | :--- | :--- | :--- |
| **Create** (–°–æ–∑–¥–∞—Ç—å) | `POST` | `/tasks` | –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É. –î–∞–Ω–Ω—ã–µ (e.g., JSON) –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞. |
| **Read** (–ü—Ä–æ—á–∏—Ç–∞—Ç—å) | `GET` | `/tasks` | –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ **–≤—Å–µ—Ö** –∑–∞–¥–∞—á. |
| **Read** (–ü—Ä–æ—á–∏—Ç–∞—Ç—å) | `GET` | `/tasks/{id}` | –ü–æ–ª—É—á–∞–µ—Ç **–æ–¥–Ω—É** –∑–∞–¥–∞—á—É –ø–æ –µ–µ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/tasks/1`). |
| **Update** (–û–±–Ω–æ–≤–∏—Ç—å) | `PUT` / `PATCH` | `/tasks/{id}` | –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID. –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Ç–µ–ª–µ. |
| **Delete** (–£–¥–∞–ª–∏—Ç—å) | `DELETE` | `/tasks/{id}` | –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID. |

**–í–∞–∂–Ω–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ `PUT` –∏ `PATCH`:**

  * **`PUT`**: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç —Ä–µ—Å—É—Ä—Å. –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–¥–∏—Ç–µ –∫–∞–∫–æ–µ-—Ç–æ –ø–æ–ª–µ, –æ–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ (–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
  * **`PATCH`**: –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ—Å—É—Ä—Å. –í—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.

-----

## 3\. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Go

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è REST API –Ω–∞ Go –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä (—Ä–æ—É—Ç–µ—Ä) –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.

### –ö–ª—é—á–µ–≤—ã–µ –ø–∞–∫–µ—Ç—ã

1.  **`net/http`**: üì¶ –≠—Ç–æ —è–¥—Ä–æ. –û–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞ (`http.ListenAndServe`) –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (`http.HandlerFunc`).
2.  **`encoding/json`**: üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (Go struct -\> JSON, `json.Marshal`) –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (JSON -\> Go struct, `json.Unmarshal`).
3.  **–°—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ä–æ—É—Ç–µ—Ä (Mux)**: üîß –•–æ—Ç—è `net/http` –∏–º–µ–µ—Ç —Å–≤–æ–π —Ä–æ—É—Ç–µ—Ä, –æ–Ω –Ω–µ—É–¥–æ–±–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ URL (–∫–∞–∫ `/tasks/{id}`). –ü–æ—ç—Ç–æ–º—É –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç:
      * **`chi`**: –û—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–π, –ª–µ–≥–∫–∏–π, –±—ã—Å—Ç—Ä—ã–π –∏ —Ö–æ—Ä–æ—à–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π.
      * **`gorilla/mux`**: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π, –º–æ—â–Ω—ã–π –∏ –≥–∏–±–∫–∏–π —Ä–æ—É—Ç–µ—Ä.
      * **`gin-gonic`**: –≠—Ç–æ —É–∂–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–æ—É—Ç–µ—Ä, –∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.

### –®–∞–≥ –∑–∞ —à–∞–≥–æ–º: –ü—Ä–∏–º–µ—Ä API –¥–ª—è "–ó–∞–¥–∞—á" (—Å `chi`)

–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç–æ–µ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á.

**–®–∞–≥ 0: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ `chi`**

```bash
go get -u github.com/go-chi/chi/v5
```

**–®–∞–≥ 1: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)**

```
/my-api
  go.mod
  main.go
```

**–®–∞G 2: `main.go` (–ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)**

```go
package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"sync" // –ò—Å–ø–æ–ª—å–∑—É–µ–º RWMutex –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ map

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
)

// Task - –Ω–∞—à–∞ –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
type Task struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
	Done  bool   `json:"done"`
}

// --- –•—Ä–∞–Ω–∏–ª–∏—â–µ (–í–º–µ—Å—Ç–æ –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ–º map) ---

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
var (
	tasks  = make(map[int]Task) // –ù–∞—à–∞ "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
	nextID = 1                  // –ü—Ä–æ—Å—Ç–æ–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π ID
	mu     sync.RWMutex         // Mutex –¥–ª—è –∑–∞—â–∏—Ç—ã tasks –∏ nextID
)

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (Handlers) ---

// 1. CREATE: POST /tasks
func createTaskHandler(w http.ResponseWriter, r *http.Request) {
	var task Task
	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –Ω–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	if err := json.NewDecoder(r.Body).Decode(&task); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	// –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –∑–∞–ø–∏—Å–∏
	mu.Lock()
	task.ID = nextID
	nextID++
	tasks[task.ID] = task
	mu.Unlock()

	// –û—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated) // 201 Created
	json.NewEncoder(w).Encode(task)
}

// 2. READ (All): GET /tasks
func getTasksHandler(w http.ResponseWriter, r *http.Request) {
	// –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è —á—Ç–µ–Ω–∏—è
	mu.RLock()
	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º map –≤ slice –¥–ª—è JSON-–æ—Ç–≤–µ—Ç–∞
	taskList := make([]Task, 0, len(tasks))
	for _, task := range tasks {
		taskList = append(taskList, task)
	}
	mu.RUnlock()

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK) // 200 OK
	json.NewEncoder(w).Encode(taskList)
}

// 3. READ (One): GET /tasks/{id}
func getTaskHandler(w http.ResponseWriter, r *http.Request) {
	// chi –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º –ª–µ–≥–∫–æ –ø–æ–ª—É—á–∏—Ç—å {id} –∏–∑ URL
	idStr := chi.URLParam(r, "id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "Invalid task ID", http.StatusBadRequest)
		return
	}

	mu.RLock()
	task, ok := tasks[id]
	mu.RUnlock()

	if !ok {
		http.Error(w, "Task not found", http.StatusNotFound) // 404 Not Found
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(task)
}

// 4. UPDATE: PUT /tasks/{id}
func updateTaskHandler(w http.ResponseWriter, r *http.Request) {
	idStr := chi.URLParam(r, "id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "Invalid task ID", http.StatusBadRequest)
		return
	}

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞
	mu.RLock()
	_, ok := tasks[id]
	mu.RUnlock()
	if !ok {
		http.Error(w, "Task not found", http.StatusNotFound)
		return
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Ç–µ–ª–æ –∑–∞–¥–∞—á–∏
	var updatedTask Task
	if err := json.NewDecoder(r.Body).Decode(&updatedTask); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	mu.Lock()
	updatedTask.ID = id // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
	tasks[id] = updatedTask
	mu.Unlock()

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(updatedTask)
}

// 5. DELETE: DELETE /tasks/{id}
func deleteTaskHandler(w http.ResponseWriter, r *http.Request) {
	idStr := chi.URLParam(r, "id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "Invalid task ID", http.StatusBadRequest)
		return
	}

	mu.Lock()
	_, ok := tasks[id]
	if ok {
		delete(tasks, id)
	}
	mu.Unlock()

	if !ok {
		http.Error(w, "Task not found", http.StatusNotFound)
		return
	}

	// –ü—Ä–∏ —É—Å–ø–µ—Ö–µ DELETE –ø—Ä–∏–Ω—è—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å 204 No Content
	w.WriteHeader(http.StatusNoContent)
}

// --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (main) ---

func main() {
	// üöÄ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä chi
	r := chi.NewRouter()

	// Middleware - —ç—Ç–æ "–æ–±–µ—Ä—Ç–∫–∏" –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤.
	// Logger - –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –ª–æ–≥–∏ –æ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
	r.Use(middleware.Logger)

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è /tasks
	r.Route("/tasks", func(r chi.Router) {
		r.Post("/", createTaskHandler)      // POST /tasks
		r.Get("/", getTasksHandler)        // GET /tasks
		r.Get("/{id}", getTaskHandler)     // GET /tasks/123
		r.Put("/{id}", updateTaskHandler)  // PUT /tasks/123
		r.Delete("/{id}", deleteTaskHandler) // DELETE /tasks/123
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	fmt.Println("Server is running on port 8080...")
	log.Fatal(http.ListenAndServe(":8080", r))
}
```

**–®–∞–≥ 3: –ó–∞–ø—É—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**

1.  –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–¥ –∫–∞–∫ `main.go`.
2.  –í—ã–ø–æ–ª–Ω–∏—Ç–µ `go mod init my-api` (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏).
3.  –í—ã–ø–æ–ª–Ω–∏—Ç–µ `go mod tidy` (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ `chi`).
4.  –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: `go run main.go`.

**–í—ã –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Å –ø–æ–º–æ—â—å—é `curl` –∏–ª–∏ Postman:**

  * **Create:** `curl -X POST -d '{"title":"My first task"}' http://localhost:8080/tasks`
  * **Read (All):** `curl http://localhost:8080/tasks`
  * **Read (One):** `curl http://localhost:8080/tasks/1`
  * **Update:** `curl -X PUT -d '{"id":1, "title":"My updated task", "done":true}' http://localhost:8080/tasks/1`
  * **Delete:** `curl -X DELETE http://localhost:8080/tasks/1`

-----

## 4\. –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è "–ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è"

1.  **–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON**:

      * **–ó–∞–ø–∏—Å—å (–û—Ç–≤–µ—Ç):** `json.NewEncoder(w).Encode(data)`. –≠—Ç–æ –ø–æ—Ç–æ–∫–æ–≤—ã–π —Å–ø–æ—Å–æ–±, –æ–Ω —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ, —á–µ–º `json.Marshal`.
      * **–ß—Ç–µ–Ω–∏–µ (–ó–∞–ø—Ä–æ—Å):** `json.NewDecoder(r.Body).Decode(&myStruct)`.

2.  **HTTP-—Å—Ç–∞—Ç—É—Å—ã (–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ\!)**:

      * `http.StatusOK` (200): –£—Å–ø–µ—à–Ω—ã–π `GET` –∏–ª–∏ `PUT`/`PATCH`.
      * `http.StatusCreated` (201): –£—Å–ø–µ—à–Ω—ã–π `POST`.
      * `http.StatusNoContent` (204): –£—Å–ø–µ—à–Ω—ã–π `DELETE` (—Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º).
      * `http.StatusBadRequest` (400): –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON).
      * `http.StatusNotFound` (404): –†–µ—Å—É—Ä—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, `task/999`) –Ω–µ –Ω–∞–π–¥–µ–Ω.
      * `http.StatusInternalServerError` (500): –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î).

3.  **–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (Concurrency)**:

      * –í Go –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π *–≥–æ—Ä—É—Ç–∏–Ω–µ* (goroutine).
      * –ï—Å–ª–∏ –≤—ã, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ (map, slice), –≤—ã **–æ–±—è–∑–∞–Ω—ã** –∑–∞—â–∏—â–∞—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –º—å—é—Ç–µ–∫—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `sync.RWMutex`), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "–≥–æ–Ω–∫–∏ –¥–∞–Ω–Ω—ã—Ö".

4.  **–†–µ–∞–ª—å–Ω—ã–π –º–∏—Ä vs. –ü—Ä–∏–º–µ—Ä**:

      * –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤–º–µ—Å—Ç–æ `map[int]Task` —É –≤–∞—Å –±—É–¥–µ—Ç —Å–ª–æ–π **–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö** (–Ω–∞–ø—Ä–∏–º–µ—Ä, PostgreSQL, MySQL) –∏ –≤—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç `database/sql` –∏–ª–∏ GORM (ORM-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞).
      * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (Handlers) –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ "—Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ" —Å–ª–æ—è, –∫–æ—Ç–æ—Ä—ã–π, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, –±—É–¥–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é" (—Å–ª–æ—é –¥–∞–Ω–Ω—ã—Ö). –≠—Ç–æ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –ª–æ–≥–∏–∫—É.